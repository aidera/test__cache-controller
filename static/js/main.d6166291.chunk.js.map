{"version":3,"sources":["components/AddCacheForm/AddCacheForm.module.sass","components/CacheList/CacheList.module.sass","components/AddCacheForm/AddCacheForm.tsx","components/CacheList/CacheElement/CacheElement.tsx","components/CacheList/CacheList.tsx","components/App.tsx","libs/cacheController.ts","components/AppContainer.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddCacheForm","React","memo","props","chosenCachePair","addNewCachePair","useState","cacheKey","setCacheKey","cacheValue","setCacheValue","useEffect","initialValues","cacheController__inputKey","cacheController__inputValue","enableReinitialize","validationSchema","Yup","required","onSubmit","values","actions","resetForm","onFocusField","document","querySelector","focus","formik","className","s","form","htmlFor","placeholder","type","id","name","touched","CacheElement","setCachePairToForm","onClick","CacheList","cacheElements","table","map","element","key","Object","keys","App","CacheController","maxElementsCount","prefixStart","prefixCount","this","regExp","RegExp","replace","clearStart","clearPrefixStart","clearPrefixCount","regExpCount","i","localStorage","length","match","clearKey","clearAllPrefixes","push","minValueKey","forEach","Number","getItem","withCountPrefix","some","elem","value","setItem","withPrefix","removeItem","elementValue","elementCount","newValue","String","console","log","setElementsUsageCount","getKeys","isElementExistInStorage","editElement","lessUsedElement","getLessUsedElement","removeElement","addElement","cachedElements","AppContainer","cacheController","state","get","setState","refreshCacheTable","elements","getAll","set","PureComponent","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6166291.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddCacheForm_form__3ANWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"CacheList_table__3boB4\"};","import React, {useEffect, useState} from 'react'\r\nimport { Formik, Field, Form} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport s from './AddCacheForm.module.sass'\r\n\r\n\r\n\r\ntype FormType = {\r\n    chosenCachePair: Array<string>\r\n    addNewCachePair: (key: string, value: string) => void\r\n}\r\n\r\nconst AddCacheForm: React.FC<FormType> = React.memo((props) => {\r\n\r\n    const {chosenCachePair, addNewCachePair} = props\r\n\r\n    let [cacheKey, setCacheKey] = useState(chosenCachePair[0] || '')\r\n    let [cacheValue, setCacheValue] = useState(chosenCachePair[1] || '')\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setCacheKey(chosenCachePair[0] || '')\r\n        setCacheValue(chosenCachePair[1] || '')\r\n\r\n    }, [chosenCachePair])\r\n\r\n\r\n\r\n    return(\r\n        <section>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    cacheController__inputKey: cacheKey,\r\n                    cacheController__inputValue: cacheValue\r\n                }}\r\n                enableReinitialize={true}\r\n                validationSchema={Yup.object({\r\n                    cacheController__inputKey: Yup.string()\r\n                        .required('Required'),\r\n                    cacheController__inputValue: Yup.string()\r\n                        .required('Required')\r\n                })}\r\n\r\n                onSubmit={(values, actions)=>{\r\n                    addNewCachePair(values.cacheController__inputKey, values.cacheController__inputValue)\r\n                    setCacheKey('')\r\n                    setCacheValue('')\r\n                    actions.resetForm()\r\n                    const onFocusField: HTMLInputElement | null = document.querySelector('#cacheController__inputKey')\r\n                    if(onFocusField){\r\n                        onFocusField.focus()\r\n                    }\r\n\r\n                }}\r\n            >\r\n                {formik => {\r\n                    return <Form className={s.form}>\r\n                        <fieldset>\r\n                            <label htmlFor=\"cacheController__inputKey\">Key</label>\r\n                            <Field\r\n                                placeholder='Enter key'\r\n                                type='text'\r\n                                id='cacheController__inputKey'\r\n                                name='cacheController__inputKey'\r\n                            />\r\n                        </fieldset>\r\n\r\n                        <fieldset>\r\n                            <label htmlFor=\"cacheController__inputValue\">Value</label>\r\n                            <Field\r\n                                placeholder='Enter value'\r\n                                type='text'\r\n                                id='cacheController__inputValue'\r\n                                name='cacheController__inputValue'\r\n                            />\r\n                        </fieldset>\r\n\r\n                        {formik.touched && formik.values.cacheController__inputKey && formik.values.cacheController__inputValue &&\r\n                            <button type={'submit'} className='cacheController__button-save'>Save</button>\r\n                        }\r\n                    </Form>\r\n                }}\r\n            </Formik>\r\n\r\n        </section>\r\n    )\r\n})\r\n\r\nexport default AddCacheForm","import React from 'react'\r\n\r\n\r\n\r\ntype ElementType = {\r\n    cacheKey: string\r\n    cacheValue: string\r\n    setCachePairToForm: (key: string) => void\r\n}\r\n\r\nconst CacheElement: React.FC<ElementType> = React.memo((props) => {\r\n\r\n    const {cacheKey, cacheValue, setCachePairToForm} = props\r\n\r\n    return(\r\n\r\n        <tr onClick={() => setCachePairToForm(cacheKey)}>\r\n            <td>{cacheKey}</td>\r\n            <td>{cacheValue}</td>\r\n        </tr>\r\n\r\n\r\n    )\r\n})\r\n\r\nexport default CacheElement","import React from 'react'\r\nimport CacheElement from './CacheElement/CacheElement'\r\nimport s from './CacheList.module.sass'\r\n\r\n\r\n\r\ntype CacheList = {\r\n    cacheElements: Array<object>\r\n    setCachePairToForm: (key: string | null) => void\r\n}\r\n\r\nconst CacheList: React.FC<CacheList> = React.memo((props) => {\r\n\r\n    const {cacheElements, setCachePairToForm} = props\r\n\r\n    return(\r\n        <section>\r\n\r\n            <table className={s.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Key</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {cacheElements.map((element: object) => {\r\n                        return (\r\n                            <CacheElement\r\n                                key={Object.keys(element)[0]}\r\n                                cacheKey={Object.keys(element)[0]}\r\n                                cacheValue={Object.values(element)[0]}\r\n                                setCachePairToForm={setCachePairToForm}\r\n                            />\r\n                        )\r\n                    })}\r\n\r\n                </tbody>\r\n            </table>\r\n\r\n        </section>\r\n    )\r\n})\r\n\r\nexport default CacheList","import React from 'react'\nimport '../assets/styles/global.sass'\nimport AddCacheForm from './AddCacheForm/AddCacheForm'\nimport CacheList from './CacheList/CacheList'\n\n\n\ntype AppType = {\n    cacheElements: Array<object>\n    chosenCachePair: Array<string>\n    setCachePairToForm: (key: string | null) => void\n    addNewCachePair: (key: string, value: string) => void\n}\n\nconst App: React.FC<AppType> = React.memo((props) => {\n\n    const {cacheElements, chosenCachePair, setCachePairToForm, addNewCachePair} = props\n\n    return (\n        <main>\n\n            <h1>Cache controller</h1>\n\n            <div id='cacheController'>\n\n                <AddCacheForm\n                    chosenCachePair={chosenCachePair}\n                    addNewCachePair={addNewCachePair}\n                />\n                <CacheList\n                    cacheElements={cacheElements}\n                    setCachePairToForm={setCachePairToForm}\n                />\n\n            </div>\n\n        </main>\n    )\n})\n\nexport default App\n","\r\nexport default class CacheController{\r\n\r\n    private readonly maxElementsCount: number\r\n    private readonly prefixStart: string\r\n    private readonly prefixCount: string\r\n\r\n\r\n\r\n    constructor(maxElementsCount: number, prefixStart?: string, prefixCount?: string){\r\n        this.maxElementsCount = maxElementsCount\r\n        this.prefixStart = prefixStart || 'CC__'\r\n        this.prefixCount = prefixCount || '__COUNT'\r\n    }\r\n\r\n\r\n\r\n    private withPrefix (key: string) {\r\n        return this.prefixStart+key\r\n    }\r\n\r\n\r\n    private withCountPrefix (key: string) {\r\n        return this.prefixStart+key+this.prefixCount\r\n    }\r\n\r\n\r\n\r\n\r\n    private clearPrefixStart (key: string) {\r\n        const regExp = new RegExp(this.prefixStart)\r\n        return key.replace(regExp, '')\r\n    }\r\n\r\n    private clearPrefixCount (key: string) {\r\n        const regExp = new RegExp(this.prefixCount)\r\n        return key.replace(regExp, '')\r\n    }\r\n\r\n    private clearAllPrefixes (key: string) {\r\n        const clearStart = this.clearPrefixStart(key)\r\n        return this.clearPrefixCount(clearStart)\r\n    }\r\n\r\n\r\n    private getKeys () {\r\n        let keys: Array<string> = []\r\n\r\n        const regExpCount = new RegExp(this.prefixCount)\r\n\r\n        for(let i = 0; i < localStorage.length; i++){\r\n            const key = localStorage.key(i)\r\n\r\n            if(key) {\r\n                if(key.match(regExpCount) === null){\r\n                    const clearKey = this.clearAllPrefixes(key)\r\n                    keys.push(clearKey)\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n\r\n    private getLessUsedElement (keys: Array<string>) {\r\n        let minValueKey = null as string | null\r\n\r\n        keys.forEach((key) => {\r\n            if(minValueKey === null){\r\n                minValueKey = key\r\n            }else{\r\n                let currentValue = Number(localStorage.getItem(this.withCountPrefix(key)))\r\n                let prevValue = Number(localStorage.getItem(this.withCountPrefix(minValueKey)))\r\n                if(currentValue<prevValue){\r\n                    minValueKey = key\r\n                }\r\n            }\r\n        })\r\n\r\n        return minValueKey\r\n    }\r\n\r\n\r\n    private isElementExistInStorage (key: string, keys: Array<string>) {\r\n        return keys.some((elem)=>{\r\n            return key === elem\r\n        })\r\n    }\r\n\r\n\r\n    private addElement (key: string, value: string) {\r\n        localStorage.setItem(this.withPrefix(key), value)\r\n        localStorage.setItem(this.withCountPrefix(key), '0')\r\n    }\r\n\r\n\r\n    private editElement (key: string, value: string) {\r\n        localStorage.setItem(this.withPrefix(key), value)\r\n    }\r\n\r\n\r\n    private removeElement (key: string) {\r\n        localStorage.removeItem(this.withPrefix(key))\r\n        localStorage.removeItem(this.withCountPrefix(key))\r\n    }\r\n\r\n\r\n    private setElementsUsageCount (key: string) {\r\n        const elementValue = localStorage.getItem(this.withCountPrefix(key))\r\n        const isElementExist = !!elementValue\r\n\r\n        if(isElementExist){\r\n            const elementCount = Number(elementValue)\r\n            const newValue = String(elementCount + 1)\r\n            localStorage.setItem(this.withCountPrefix(key), newValue)\r\n\r\n\r\n            console.log('key \"'+key + '\" update its count: ' + newValue)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    get (key: string) {\r\n        this.setElementsUsageCount(key)\r\n        return localStorage.getItem(this.withPrefix(key))\r\n    }\r\n\r\n\r\n    set (key: string, value: string) {\r\n        const keys = this.getKeys()\r\n\r\n        if(this.isElementExistInStorage(key, keys)){\r\n            this.editElement(key, value)\r\n        }else{\r\n            if(keys.length >= this.maxElementsCount){\r\n                const lessUsedElement = this.getLessUsedElement(keys)\r\n                if(lessUsedElement !== null){\r\n                    this.removeElement(lessUsedElement)\r\n                }\r\n            }\r\n            this.addElement(key, value)\r\n        }\r\n        this.setElementsUsageCount(key)\r\n\r\n    }\r\n\r\n    getAll () {\r\n        const keys = this.getKeys()\r\n\r\n        let cachedElements = [] as Array<object>\r\n        keys.forEach((key) => {\r\n            const value = localStorage.getItem(this.withPrefix(key))\r\n            cachedElements.push({[key]: value})\r\n        })\r\n\r\n        return cachedElements\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport App from './App'\r\nimport CacheController from '../libs/cacheController'\r\n\r\n\r\n\r\nclass AppContainer extends React.PureComponent{\r\n\r\n    /* Change cache max elements (you can also change start and count prefixes) */\r\n    cacheController = new CacheController(2)\r\n\r\n\r\n\r\n    state = {\r\n        cacheElements: [] as Array<object>,\r\n        chosenCachePair: [] as Array<string>,\r\n    }\r\n\r\n\r\n\r\n    setCachePairToForm = (key: string | null) => {\r\n        if(key !== null){\r\n            const value = this.cacheController.get(key)\r\n            this.setState({'chosenCachePair': [key, value]})\r\n        }\r\n    }\r\n\r\n    refreshCacheTable = () => {\r\n        let elements = this.cacheController.getAll()\r\n        this.setState({'cacheElements': elements})\r\n    }\r\n\r\n    addNewCachePair = (key: string, value: string) => {\r\n        this.cacheController.set(key,value)\r\n        this.refreshCacheTable()\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.refreshCacheTable()\r\n\r\n        /* Uncomment to see local storage */\r\n        // console.log(localStorage)\r\n\r\n        /* Uncomment to clear local storage */\r\n        // localStorage.clear()\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return <App\r\n            cacheElements={this.state.cacheElements}\r\n            chosenCachePair={this.state.chosenCachePair}\r\n            setCachePairToForm={this.setCachePairToForm}\r\n            addNewCachePair={this.addNewCachePair}\r\n        />\r\n    }\r\n\r\n}\r\n\r\nexport default AppContainer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppContainer from './components/AppContainer'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}